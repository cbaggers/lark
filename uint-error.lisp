#version 330

in vec2 OUT_1551V;

layout(location = 0) out vec4 OUTPUT_COLOR_1657V;

vec4 INTEGRATE_DFG_ONLY_1656V(float N183V_1554V, float ROUGHNESS_1555V);
vec3 IMPORTANCE_SAMPLE_COS_DIR_1627V(vec2 U_1610V, vec3 N_1611V, out float return1, out float return2);
float DISNEY_DIFFUSE_1655V(float N183V_1636V, float N183L_1637V, float L183H_1638V, float LINEAR_ROUGHNESS_1639V);

float RADICAL_INVERSE_VDC_1570V(uint BITS_1564V) {
uint BITS_1565V = ((BITS_1564V << 16) | (BITS_1564V >> 16));
uint BITS_1566V = (((BITS_1564V & 1431655765) << 1) | ((BITS_1564V & 2863311530) >> 1));
uint BITS_1567V = (((BITS_1564V & 858993459) << 2) | ((BITS_1564V & 3435973836) >> 2));
uint BITS_1568V = (((BITS_1564V & 252645135) << 4) | ((BITS_1564V & 4042322160) >> 4));
uint BITS_1569V = (((BITS_1564V & 16711935) << 8) | ((BITS_1564V & 4278255360) >> 8));
return (float(BITS_1565V) * 0.00000000023283064f);
}

vec2 GET_SAMPLE_1571V(uint I_1562V, uint N_1563V) {
return vec2((float(I_1562V) / float(N_1563V)),RADICAL_INVERSE_VDC_1570V(I_1562V));
}

vec3 IMPORTANCE_SAMPLE_GGX_1586V(vec2 XI_1573V, float ROUGHNESS_1574V, vec3 N_1575V) {
float _913_1576V = (ROUGHNESS_1574V * ROUGHNESS_1574V);
float _934_1577V = (2 * (3.1415927f * XI_1573V.x));
float COS920_1578V = sqrt(((1 - XI_1573V.y) / (1 + (((_913_1576V * _913_1576V) - 1) * XI_1573V.y))));
float SIN920_1579V = sqrt((1 - (COS920_1578V * COS920_1578V)));
vec3 H_1580V = vec3((SIN920_1579V * cos(_934_1577V)),(SIN920_1579V * sin(_934_1577V)),COS920_1578V);
vec3 RESULT_FROM_IF_1581V_1582V;
if ((abs(N_1575V.z) < 0.999f)) {
RESULT_FROM_IF_1581V_1582V = vec3(0,0,1);
} else {
RESULT_FROM_IF_1581V_1582V = vec3(1,0,0);
}
vec3 UP_VECTOR_1583V = RESULT_FROM_IF_1581V_1582V;
vec3 TANGENT_X_1584V = normalize(cross(UP_VECTOR_1583V,N_1575V));
vec3 TANGENT_Y_1585V = cross(N_1575V,TANGENT_X_1584V);
return ((TANGENT_X_1584V * H_1580V.x) + ((TANGENT_Y_1585V * H_1580V.y) + (N_1575V * H_1580V.z)));
}

float SATURATE_1590V(float VAL_1589V) {
return clamp(VAL_1589V,0.0f,1.0f);
}

float SATURATE_1593V(float VAL_1592V) {
return clamp(VAL_1592V,0.0f,1.0f);
}

float SATURATE_1596V(float VAL_1595V) {
return clamp(VAL_1595V,0.0f,1.0f);
}

float GGX_GEOM_SMITH_CORRELATED_1604V(float N183V_1598V, float N183L_1599V, float _913_1600V) {
float _913178_1601V = (_913_1600V * _913_1600V);
float GGX_V_923_1602V = (N183L_1599V * sqrt((((((- N183V_1598V) * _913178_1601V) + N183V_1598V) * N183V_1598V) + _913178_1601V)));
float GGX_L_923_1603V = (N183V_1598V * sqrt((((((- N183L_1599V) * _913178_1601V) + N183L_1599V) * N183L_1599V) + _913178_1601V)));
return (0.5f / (GGX_V_923_1602V + GGX_L_923_1603V));
}

vec3 IMPORTANCE_SAMPLE_COS_DIR_1627V(vec2 U_1610V, vec3 N_1611V, out float return1, out float return2) {
vec3 RESULT_FROM_IF_1612V_1613V;
if ((abs(N_1611V.z) < 0.999f)) {
RESULT_FROM_IF_1612V_1613V = vec3(0,0,1);
} else {
RESULT_FROM_IF_1612V_1613V = vec3(1,0,0);
}
vec3 UP_VEC_1614V = RESULT_FROM_IF_1612V_1613V;
vec3 TANGENT_X_1615V = normalize(cross(UP_VEC_1614V,N_1611V));
vec3 TANGENT_Y_1616V = cross(N_1611V,TANGENT_X_1615V);
float U1_1617V = U_1610V.x;
float U2_1618V = U_1610V.y;
float R_1619V = sqrt(U1_1617V);
float _934_1620V = (U2_1618V * (3.1415927f * 2));
vec3 PRE_L_1621V = vec3((R_1619V * cos(_934_1620V)),(R_1619V * sin(_934_1620V)),sqrt(max(0.0f,(1.0f - U1_1617V))));
vec3 L_1622V = normalize(((TANGENT_X_1615V * PRE_L_1621V.y) + ((TANGENT_Y_1616V * PRE_L_1621V.x) + (N_1611V * PRE_L_1621V.z))));
float N183L_1623V = dot(N_1611V,L_1622V);
float PDF_1624V = (N183L_1623V * 0.31830987f);
vec3 V_TMP_1625V_1626V = L_1622V;
return1 = N183L_1623V;
return2 = PDF_1624V;
return V_TMP_1625V_1626V;
}

float SATURATE_1631V(float VAL_1630V) {
return clamp(VAL_1630V,0.0f,1.0f);
}

float SATURATE_1634V(float VAL_1633V) {
return clamp(VAL_1633V,0.0f,1.0f);
}

vec3 FRESNEL_SCHLICK_1648V(vec3 F0_1645V, float F90_1646V, float U_1647V) {
return (F0_1645V + ((vec3(F90_1646V) - F0_1645V) * pow((1.0f - U_1647V),5.0f)));
}

vec3 FRESNEL_SCHLICK_1653V(vec3 F0_1650V, float F90_1651V, float U_1652V) {
return (F0_1650V + ((vec3(F90_1651V) - F0_1650V) * pow((1.0f - U_1652V),5.0f)));
}

float DISNEY_DIFFUSE_1655V(float N183V_1636V, float N183L_1637V, float L183H_1638V, float LINEAR_ROUGHNESS_1639V) {
float ENERGY_BIAS_1640V = mix(0.0f,0.5f,LINEAR_ROUGHNESS_1639V);
float ENERGY_FACTOR_1641V = mix(1.0f,(1.0f / 1.51f),LINEAR_ROUGHNESS_1639V);
float L183H178_1642V = (L183H_1638V * L183H_1638V);
float FD90_1643V = (ENERGY_BIAS_1640V + (2.0f * (L183H178_1642V * LINEAR_ROUGHNESS_1639V)));
vec3 F0_1644V = vec3(1,1,1);
float LIGHT_SCATTER_1649V = FRESNEL_SCHLICK_1648V(F0_1644V,FD90_1643V,N183L_1637V).x;
float VIEW_SCATTER_1654V = FRESNEL_SCHLICK_1653V(F0_1644V,FD90_1643V,N183V_1636V).x;
return (LIGHT_SCATTER_1649V * (VIEW_SCATTER_1654V * ENERGY_FACTOR_1641V));
}

vec4 INTEGRATE_DFG_ONLY_1656V(float N183V_1554V, float ROUGHNESS_1555V) {
int SAMPLE_COUNT_1556V = 1024;
vec3 N_1557V = vec3(0,0,1);
vec3 V_1558V = vec3(sqrt((1.0f - (N183V_1554V * N183V_1554V))),0,N183V_1554V);
vec4 ACCUM_1559V = vec4(0);
float ACCUM_WEIGHT_1560V = 0.0f;
for (int I_1561V = 0;(I_1561V < SAMPLE_COUNT_1556V);(++ I_1561V)) {
vec2 U_1572V = GET_SAMPLE_1571V(I_1561V,SAMPLE_COUNT_1556V);
vec3 H_1587V = IMPORTANCE_SAMPLE_GGX_1586V(U_1572V,ROUGHNESS_1555V,N_1557V);
vec3 L_1588V = ((2 * (dot(V_1558V,H_1587V) * H_1587V)) - V_1558V);
float N183L_1591V = SATURATE_1590V(L_1588V.z);
float N183H_1594V = SATURATE_1593V(H_1587V.z);
float V183H_1597V = SATURATE_1596V(dot(V_1558V,H_1587V));
float G_1605V = GGX_GEOM_SMITH_CORRELATED_1604V(N183V_1554V,N183L_1591V,ROUGHNESS_1555V);
if ((N183L_1591V > 0) && (G_1605V > 0)) {
float G_VIS_1606V = (G_1605V * (dot(L_1588V,H_1587V) / (N183H_1594V * N183V_1554V)));
float FC_1607V = pow((1 - V183H_1597V),5);
ACCUM_1559V.x = (ACCUM_1559V.x + ((1 - FC_1607V) * G_VIS_1606V));
ACCUM_1559V.x;
ACCUM_1559V.y = (ACCUM_1559V.y + (FC_1607V * G_VIS_1606V));
ACCUM_1559V.y;
}
vec2 U_1608V = fract((U_1572V + vec2(0.5f)));
vec3 MVB_1609V0;
float MVB_1609V1;
float MVB_1609V2;
MVB_1609V0 = IMPORTANCE_SAMPLE_COS_DIR_1627V(U_1608V,N_1557V,MVB_1609V1,MVB_1609V2);
if ((MVB_1609V1 > 0)) {
float L183H_1632V = SATURATE_1631V(dot(MVB_1609V0,normalize((V_1558V + MVB_1609V0))));
float N183V_1635V = SATURATE_1634V(dot(N_1557V,V_1558V));
ACCUM_1559V.z = (ACCUM_1559V.z + DISNEY_DIFFUSE_1655V(N183V_1635V,MVB_1609V1,L183H_1632V,sqrt(ROUGHNESS_1555V)));
ACCUM_1559V.z;
}
ACCUM_WEIGHT_1560V = (ACCUM_WEIGHT_1560V + 1.0f);
ACCUM_WEIGHT_1560V;
}
return (ACCUM_1559V * (1.0f / ACCUM_WEIGHT_1560V));
}

void main() {
float N183V_1552V = OUT_1551V.x;
float ROUGHNESS_1553V = OUT_1551V.y;
OUTPUT_COLOR_1657V = INTEGRATE_DFG_ONLY_1656V(N183V_1552V,ROUGHNESS_1553V);
}
   [Condition of type SIMPLE-ERROR]

Restarts:
 0: [CONTINUE] Swank.Live: Continue
 1: [RETRY] Retry SLIME REPL evaluation request.
 2: [*ABORT] Return to SLIME's top level.
 3: [ABORT] Abort thread (#<THREAD "repl-thread" RUNNING {1004A000B3}>)

Backtrace:
  0: (CEPL.PIPELINES::MAKE-SHADER :FRAGMENT-SHADER "#version 330 ..)
  1: (CEPL.PIPELINES::%COMPILE-LINK-AND-UPLOAD DFG-TEXTURE-PASS ((:VERTEX . #<GPU-FUNCTION (PASS-THROUGH-VERT G-PT)>) (:FRAGMENT . #<GPU-FUNCTION (DFG-TEXTURE :VEC2)>)))
  2: ((LABELS #:|init1547| :IN "/home/baggers/.cache/common-lisp/sbcl-1.2.4.debian-linux-x64/home/baggers/quicklisp/local-projects/lark/dfg-texture.fasl"))
  3: (DFG-TEXTURE-PASS #<unavailable argument> #<CEPL:BUFFER-STREAM (2) :LENGTH 6 :ARRAYS 1>)
  4: (RENDER)
  5: (RUN 0)
  6: (SB-INT:SIMPLE-EVAL-IN-LEXENV (RUN 1) #<NULL-LEXENV>)
  7: (EVAL (RUN 1))
 --more--

;; Error compiling fragment-shader:
;; 0(13) : error C7011: implicit cast from "int" to "uint"
;; 0(14) : error C7011: implicit cast from "int" to "uint"
;; 0(15) : error C7011: implicit cast from "int" to "uint"
;; 0(16) : error C7011: implicit cast from "int" to "uint"
;; 0(119) : error C7011: implicit cast from "int" to "uint"
;; 0(119) : error C7011: implicit cast from "int" to "uint"
